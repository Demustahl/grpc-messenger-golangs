========== ./cmd/server/main.go ==========

package main

import (
	"grpc-messenger-golang/pkg/db"
	"grpc-messenger-golang/pkg/server"
	"log"
)

func main() {
	const (
		port   = 50051
		dbURI  = "mongodb://localhost:27017"
		dbName = "messenger"
	)

	// Подключение к MongoDB
	mongoDB, err := db.Connect(dbURI, dbName)
	if err != nil {
		log.Fatalf("Failed to connect to MongoDB: %v", err)
	}
	defer mongoDB.Client.Disconnect(nil)

	// Запуск сервера
	srv := server.NewServer(mongoDB)
	if err := srv.Start(port); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}



========== ./pkg/db/mongodb.go ==========

package db

import (
	"context"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type MongoDB struct {
	Client     *mongo.Client
	UserCol    *mongo.Collection
	ChatCol    *mongo.Collection
	MessageCol *mongo.Collection
}

func Connect(uri string, dbName string) (*MongoDB, error) {
	client, err := mongo.NewClient(options.Client().ApplyURI(uri))
	if err != nil {
		return nil, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := client.Connect(ctx); err != nil {
		return nil, err
	}

	log.Println("Connected to MongoDB")

	db := client.Database(dbName)
	return &MongoDB{
		Client:     client,
		UserCol:    db.Collection("users"),
		ChatCol:    db.Collection("chats"),
		MessageCol: db.Collection("messages"),
	}, nil
}


========== ./pkg/server/server.go ==========

package server

import (
	"context"
	"fmt"
	"log"
	"net"

	"grpc-messenger-golang/api/generated"
	"grpc-messenger-golang/pkg/db"
	"grpc-messenger-golang/pkg/utils"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"golang.org/x/crypto/bcrypt"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/emptypb"
)

type Server struct {
	db *db.MongoDB
	generated.UnimplementedMessengerServiceServer
	generated.UnimplementedAuthServiceServer
}

func NewServer(db *db.MongoDB) *Server {
	return &Server{db: db}
}

func (s *Server) Start(port int) error {
	listener, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
	if err != nil {
		return fmt.Errorf("failed to listen on port %d: %v", port, err)
	}

	grpcServer := grpc.NewServer()

	// Регистрируем сервисы
	generated.RegisterMessengerServiceServer(grpcServer, s)
	generated.RegisterAuthServiceServer(grpcServer, s)

	log.Printf("Server is running on port %d", port)
	return grpcServer.Serve(listener)
}

func (s *Server) RegisterUser(ctx context.Context, req *generated.User) (*generated.User, error) {
	// Проверяем, существует ли email
	var existingUser generated.User
	err := s.db.UserCol.FindOne(ctx, bson.M{"email": req.Email}).Decode(&existingUser)
	if err != mongo.ErrNoDocuments {
		if err == nil {
			return nil, status.Errorf(codes.AlreadyExists, "user with this email already exists")
		}
		return nil, status.Errorf(codes.Internal, "error checking email existence: %v", err)
	}

	// Хэшируем пароль
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "failed to hash password")
	}

	// Заменяем пароль на его хэш
	req.Password = string(hashedPassword)

	// Сохраняем пользователя в базе
	_, err = s.db.UserCol.InsertOne(ctx, req)
	if err != nil {
		log.Printf("Failed to register user: %v", err)
		return nil, status.Errorf(codes.Internal, "failed to register user")
	}

	log.Printf("User registered: %+v", req)
	return req, nil
}

func (s *Server) Login(ctx context.Context, req *generated.LoginRequest) (*generated.LoginResponse, error) {
	// Ищем пользователя в базе по email
	var user generated.User
	err := s.db.UserCol.FindOne(ctx, bson.M{"email": req.Email}).Decode(&user)
	if err != nil {
		return nil, status.Errorf(codes.NotFound, "user not found")
	}

	// Проверяем пароль
	err = bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(req.Password))
	if err != nil {
		return nil, status.Errorf(codes.Unauthenticated, "invalid credentials")
	}

	// Генерация JWT токена
	token, err := utils.GenerateJWT(user.Id)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "failed to generate token")
	}

	return &generated.LoginResponse{Token: token}, nil
}

func (s *Server) SendFriendRequest(ctx context.Context, req *generated.FriendRequest) (*emptypb.Empty, error) {
	// Проверяем токен
	userID, err := utils.VerifyToken(ctx)
	if err != nil {
		return nil, err
	}

	log.Printf("User %s sent a friend request to %s", userID, req.ToUserId)
	return &emptypb.Empty{}, nil
}


========== ./pkg/utils/jwt.go ==========

package utils

import (
	"context"
	"os"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/joho/godotenv"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
)

var jwtKey []byte

func init() {
	// Load environment variables from the specified file
	if err := godotenv.Load("jwt-token.env"); err != nil {
		panic("Error loading jwt-token.env file")
	}

	// Load JWT key from environment variable
	jwtKey = []byte(os.Getenv("JWT_SECRET"))
	if len(jwtKey) == 0 {
		panic("JWT_SECRET environment variable is not set")
	}
}

// Claims представляет данные, которые будут храниться в токене
type Claims struct {
	UserID string `json:"user_id"`
	jwt.RegisteredClaims
}

// Генерация JWT токена
func GenerateJWT(userID string) (string, error) {
	expirationTime := time.Now().Add(24 * time.Hour)
	claims := &Claims{
		UserID: userID,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(expirationTime),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString(jwtKey)
}

// Проверка и парсинг токена
func ParseJWT(tokenStr string) (*Claims, error) {
	claims := &Claims{}
	token, err := jwt.ParseWithClaims(tokenStr, claims, func(token *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	})
	if err != nil || !token.Valid {
		return nil, err
	}
	return claims, nil
}

// Проверка токена и извлечение данных
func VerifyToken(ctx context.Context) (string, error) {
	// Извлечение токена из метаданных (например, Authorization)
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return "", status.Errorf(codes.Unauthenticated, "no metadata found")
	}

	authHeader, ok := md["authorization"]
	if !ok || len(authHeader) == 0 {
		return "", status.Errorf(codes.Unauthenticated, "no authorization token provided")
	}

	tokenStr := authHeader[0]
	claims, err := ParseJWT(tokenStr)
	if err != nil {
		return "", status.Errorf(codes.Unauthenticated, "invalid token: %v", err)
	}

	return claims.UserID, nil
}


